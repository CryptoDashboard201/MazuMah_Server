type User {
	id: ID!
	username: String!
	password: String!
	notifyPrice: Float!
}

input AuthData {
	username: String!
	password: String!
}

type Price {
	currentPrice : Float!
	highestPrice : Float!
	lowestPrice : Float!
}

type SigninPayload {
	token: String
	user: User
}

type Update {
	highlight: Int!
}

type Query {
	allUsers: [User]
	getUserById(id: String!): User
	getPrice: Price
}

type Mutation {
	createUser(authProvider: AuthData!): User
	signinUser(auth: AuthData) : SigninPayload
	updateNotificationPrice(id: String!, notifyPrice: Float!) : User 
	comparePrice(id:String!) : Update
}

schema {
	query: Query
	mutation: Mutation
}